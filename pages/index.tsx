import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { Inter } from "@next/font/google";
import Box from "@mui/material/Box";
import TextField from "@mui/material/TextField";
import { CopyAll, Lock, LockClock } from "@mui/icons-material";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import { FormHelperText, MenuItem } from "@mui/material";
import { useState } from "react";
import { encryptPayload, generateUserKey } from "@/util/crypto";
import dayjs from "dayjs";

interface APINote {
  content: string;
  destroy_after_read: boolean;
  expires_at: string;
}

interface createdObject {
  id: string;
  key: string;
}

function createdNoteURL(o: createdObject): string {
  return location.origin + "/" + o.id + "#" + o.key;
}

export default function Home() {
  const [payload, setPayload] = useState<string>("");
  const [destroyAfterRead, setDestroyAfterRead] = useState<boolean>(true);
  const [expiresAfterHours, setExpiresAfterHours] = useState<number>(24);

  const [createdNote, setCreatedObjectID] = useState<createdObject>();

  const handleSubmit = () => {
    const key = generateUserKey();
    console.log(key);
    const ciphertext = encryptPayload(payload, key);

    const request: APINote = {
      content: ciphertext,
      destroy_after_read: destroyAfterRead,
      expires_at: dayjs().add(expiresAfterHours, "hours").toISOString(),
    };

    fetch("/api/notes", {
      method: "POST",
      body: JSON.stringify(request),
    })
      .catch((r) => {
        alert(r);
      })
      .then((resp) => {
        if (resp) {
          resp.text().then((t) => {
            setCreatedObjectID({
              id: t,
              key: key,
            });
            console.log("created", t);
          });
        }
      });
  };

  return (
    <>
      <Head>
        <title>s.cr â€” encrypted, disposable notes</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        className="site-container h-screen w-screen flex flex-col md:container sm:px-12 md:px-120 md:mx-auto p-3 md:py-8 lg:px-100"
        style={{
          maxWidth: "700px",
        }}
      >
        <span className="frontmatter">
          <div className="flex items-center mb-2">
            <Link href="/">
              <Image
                width="48"
                height="48"
                alt="Icon"
                src={"/favicon.ico"}
              ></Image>
            </Link>
            <div className="ml-3">
              <h1>s.cr</h1>
              <p>Send encrypted, disposable notes</p>
            </div>
          </div>
          <p className="tagline mt-3">
            s.cr encrypts your note in your browser, so our server has no
            information about its contents. All notes expire after a period of
            time, defaulting to 24 hours.
          </p>
        </span>

        <hr style={{ marginTop: "12px", marginBottom: "16px" }} />

        {createdNote === undefined ? (
          <Box
            component="form"
            noValidate
            autoComplete="off"
            onSubmit={(e) => {
              e.preventDefault();
              handleSubmit();
            }}
            onKeyDown={(e) => {
              if (e.ctrlKey && e.keyCode === 13) {
                handleSubmit();
              }
            }}
          >
            <TextField
              id="outlined-textarea"
              className="secret-text"
              fullWidth
              placeholder={`Your deepest, darkest secrets go here.

Tip: Press Ctrl+Enter when you're done.`}
              minRows={8}
              value={payload}
              onChange={(e) => setPayload(e.target.value)}
              multiline
            />
            <div className="flex options">
              <FormControlLabel
                className="w-1/2"
                label="Destroy after read"
                control={
                  <Checkbox
                    onChange={() => setDestroyAfterRead(!destroyAfterRead)}
                    defaultChecked={destroyAfterRead}
                    value={destroyAfterRead}
                  />
                }
              />

              <FormControl className="w-1/2">
                <InputLabel id="demo-simple-select-label">
                  Expires after
                </InputLabel>
                <Select
                  id="demo-simple-select"
                  value={expiresAfterHours}
                  onChange={(e) =>
                    setExpiresAfterHours(e.target.value as number)
                  }
                  label="Expires after"
                >
                  <MenuItem value={24}>24 hours</MenuItem>
                  <MenuItem value={24 * 3}>3 days</MenuItem>
                  <MenuItem value={24 * 7}>7 days</MenuItem>
                  <MenuItem value={24 * 30}>30 days</MenuItem>
                </Select>
              </FormControl>
            </div>
            <div className={"flex justify-between py-4"}>
              <button
                className="flex items-center create-button black-button"
                color="success"
              >
                <LockClock />
                Create
              </button>
            </div>
          </Box>
        ) : (
          <>
            <p>
              Your note has been created. Share the following URL with the
              intended recipient.
            </p>
            <div className="copy-url-box">{createdNoteURL(createdNote)}</div>
            <div className={"flex justify-between py-4"}>
              <button
                className="flex items-center create-button black-button"
                onClick={() => {
                  navigator.clipboard.writeText(createdNoteURL(createdNote));
                }}
              >
                <CopyAll />
                Copy URL
              </button>
            </div>
          </>
        )}
      </div>
    </>
  );
}
